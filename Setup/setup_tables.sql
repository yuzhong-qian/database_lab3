-- MySQL Script generated by MySQL Workbench
-- Mon Apr 24 21:11:16 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `luyang_db` DEFAULT CHARACTER SET utf8 ;
USE `luyang_db` ;

-- -----------------------------------------------------
-- Table `luyang_db`.`Author`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Author` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Author` (
  `idAuthor` INT NOT NULL AUTO_INCREMENT,
  `authorLastName` VARCHAR(45) NOT NULL,
  `authorFirstName` VARCHAR(45) NOT NULL,
  `mailAddress` VARCHAR(80) NOT NULL,
  `emailAddress` VARCHAR(128) NOT NULL,
  `affliation` VARCHAR(80) NULL,
  PRIMARY KEY (`idAuthor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `luyang_db`.`Editor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Editor` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Editor` (
  `idEditor` INT NOT NULL AUTO_INCREMENT,
  `editorLastName` VARCHAR(45) NOT NULL,
  `editorFirstName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idEditor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `luyang_db`.`RICodes`
-- -----------------------------------------------------

DROP TABLE  IF EXISTS `luyang_db`.`RICodes` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`RICodes` (
  `code`        INT NOT NULL AUTO_INCREMENT,
  `interest`    varchar(64) NOT NULL,
  PRIMARY KEY (`code`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `luyang_db`.`Manuscript`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Manuscript` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Manuscript` (
  `idManuscript` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `date` DATETIME NOT NULL,
  `status` ENUM('Submitted', 'Under review', 'Rejected', 'Accepted', 'In typesetting', 'Scheduled for publication', 'Published') NOT NULL,
  `authorList` VARCHAR(200) NOT NULL,
  `content` BLOB NOT NULL,
  `typesetPages` INT NULL,
  `idAuthor` INT NOT NULL,
  `idEditor` INT NULL,
  `code` INT NOT NULL,
  PRIMARY KEY (`idManuscript`),
  CONSTRAINT `fk_Manuscripts_Authors`
    FOREIGN KEY (`idAuthor`)
    REFERENCES `luyang_db`.`Author` (`idAuthor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Manuscripts_Editor`
    FOREIGN KEY (`idEditor`)
    REFERENCES `luyang_db`.`Editor` (`idEditor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Manuscripts_RICodes`
    FOREIGN KEY (`code`)
    REFERENCES `luyang_db`.`RICodes` (`code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `luyang_db`.`Reviewer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Reviewer` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Reviewer` (
  `idReviewer` INT NOT NULL AUTO_INCREMENT,
  `reviewerLastName` VARCHAR(45) NOT NULL,
  `reviewerFirstName` VARCHAR(45) NOT NULL,
  `emailAddress` VARCHAR(128) NOT NULL,
  `affliation` VARCHAR(64) NULL,
  PRIMARY KEY (`idReviewer`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `luyang_db`.`Feedback`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Feedback` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Feedback` (
  `idFeedback` INT NOT NULL AUTO_INCREMENT,
  `appropriateness` INT NOT NULL,
  `clarity` INT NOT NULL,
  `methodology` INT NOT NULL,
  `contribution` INT NOT NULL,
  `recommendation` ENUM('REVIEW-ACCEPT', 'REVIEW-REJECT') NOT NULL,
  `dateReceive` DATETIME NOT NULL,
  PRIMARY KEY (`idFeedback`))
ENGINE = InnoDB;

DROP TRIGGER IF EXISTS feedback_score;

DELIMITER //
CREATE TRIGGER feedbakc_score BEFORE INSERT ON `luyang_db`.`Feedback`
       FOR EACH ROW
       BEGIN
           IF NEW.appropriateness < 1 OR NEW.appropriateness > 10 
           OR NEW.clarity < 1 OR NEW.clarity > 10 
           OR NEW.methodology < 1 OR NEW.methodology > 10 
           OR NEW.contribution < 1 OR NEW.contribution > 10 
           THEN
           		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: Score must be bewteen 1 ~ 10!';
           END IF;
       END;//
DELIMITER ;

-- -----------------------------------------------------
-- Table `luyang_db`.`Assignment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Assignment` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Assignment` (
  `idManuscript` INT NOT NULL,
  `idReviewer` INT NOT NULL,
  `assignDate` DATETIME NOT NULL,
  `idFeedback` INT NULL,
  PRIMARY KEY (`idManuscript`, `idReviewer`),

  CONSTRAINT `fk_Manuscripts_has_Reviewers_Manuscripts`
    FOREIGN KEY (`idManuscript`)
    REFERENCES `luyang_db`.`Manuscript` (`idManuscript`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Manuscripts_has_Reviewers_Reviewers`
    FOREIGN KEY (`idReviewer`)
    REFERENCES `luyang_db`.`Reviewer` (`idReviewer`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Assignments_Feedbacks`
    FOREIGN KEY (`idFeedback`)
    REFERENCES `luyang_db`.`Feedback` (`idFeedback`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `luyang_db`.`Issue`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Issue` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Issue` (
  `publicationYear` INT NOT NULL,
  `publicationPeriod` INT NOT NULL,
  `volume` INT NOT NULL,
  `pages` INT NOT NULL DEFAULT 0,
  `printDate` DATE NULL,
  PRIMARY KEY (`publicationYear`, `publicationPeriod`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `luyang_db`.`Typesetting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `luyang_db`.`Typesetting` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`Typesetting` (
  `idManuscript` INT NOT NULL,
  `publicationYear` INT NOT NULL,
  `publicationPeriod` INT NOT NULL,
  `beginPage` INT NOT NULL,
  `order` INT NOT NULL,
  PRIMARY KEY (`idManuscript`, `publicationYear`, `publicationPeriod`),
  UNIQUE (idManuscript),

  CONSTRAINT `fk_scheduledManuscript_Manuscripts`
    FOREIGN KEY (`idManuscript`)
    REFERENCES `luyang_db`.`Manuscript` (`idManuscript`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Typesettings_Issues`
    FOREIGN KEY (`publicationYear` , `publicationPeriod`)
    REFERENCES `luyang_db`.`Issue` (`publicationYear` , `publicationPeriod`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

DROP TRIGGER IF EXISTS typesetting_rules;

DELIMITER //
CREATE TRIGGER typesetting_rules BEFORE INSERT ON `luyang_db`.`Typesetting`
       FOR EACH ROW
       BEGIN
           IF ((SELECT `pages` FROM `luyang_db`.`Issue` 
            WHERE `publicationYear` = NEW.publicationYear AND `publicationPeriod` = NEW.publicationPeriod) + 1 != NEW.beginPage
            OR (SELECT `typesetPages` FROM `luyang_db`.`Manuscript` 
            WHERE `idManuscript` = NEW.idManuscript) + NEW.beginPage > 100)
           THEN
              SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot publish this paper, since the wrong begin pages or not enough space left in the issue!';
           ELSE
              UPDATE `luyang_db`.`Issue` SET `pages` = (SELECT `typesetPages` FROM `luyang_db`.`Manuscript` 
              WHERE `idManuscript` = NEW.idManuscript) + NEW.beginPage - 1 WHERE `publicationYear` = NEW.publicationYear AND `publicationPeriod` = NEW.publicationPeriod;
           END IF;
       END;//
DELIMITER ;

-- -----------------------------------------------------
-- Table `luyang_db`.`InterestList`
-- -----------------------------------------------------

DROP TABLE IF EXISTS `luyang_db`.`InterestList` CASCADE;

CREATE TABLE IF NOT EXISTS `luyang_db`.`InterestList` (
  `code` INT NOT NULL,
  `idReviewer` INT NOT NULL,
  PRIMARY KEY (`code`, `idReviewer`),
  CONSTRAINT `fk_RICodes_has_Reviewers_RICodes`
    FOREIGN KEY (`code`)
    REFERENCES `luyang_db`.`RICodes` (`code`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_RICodes_has_Reviewers_Reviewers`
    FOREIGN KEY (`idReviewer`)
    REFERENCES `luyang_db`.`Reviewer` (`idReviewer`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;



-- -----------------------------------------------------
-- Table `luyang_db`.`Credential`
-- -----------------------------------------------------

DROP TABLE IF EXISTS `luyang_db`.`Credential` CASCADE;
CREATE TABLE IF NOT EXISTS `luyang_db`.`Credential` (
   `usertype` ENUM('Author', 'Editor', 'Reviewer') NOT NULL,
   `userid` INT NOT NULL,
   `password` VARCHAR(200) NOT NULL,
   PRIMARY KEY (`usertype`, `userid`))
ENGINE = InnoDB;

DROP TRIGGER IF EXISTS valid_publication_period;
DROP TRIGGER IF EXISTS max_number_interests;
DROP TRIGGER IF EXISTS valid_manuscript;
DROP TRIGGER IF EXISTS reset_submitted_status;

DELIMITER //

CREATE TRIGGER valid_publication_period BEFORE INSERT ON `luyang_db`.`Issue`
 FOR EACH ROW
    BEGIN
  IF NEW.publicationPeriod < 1 OR NEW.publicationPeriod > 4 
        THEN
             SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: Publication period must be bewteen 1 ~ 4!';
           END IF;
       END;//

CREATE TRIGGER max_number_interests BEFORE INSERT ON `luyang_db`.`InterestList`
       FOR EACH ROW
       BEGIN
           IF ((SELECT COUNT(*) FROM `luyang_db`.`InterestList` `re` WHERE `re`.`idReviewer` = NEW.idReviewer) >= 3)
           THEN
              SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You only can enter max three number of interests';
           END IF;
       END;//

CREATE TRIGGER valid_manuscript BEFORE INSERT ON `luyang_db`.`Manuscript`
       FOR EACH ROW
       BEGIN
           IF ((SELECT COUNT(*) FROM `luyang_db`.`InterestList` `re` WHERE `re`.`code` = NEW.code) <= 0)
           THEN
              SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Your paper cannot be considered at this time';
           END IF;
       END;//

CREATE TRIGGER reset_submitted_status BEFORE DELETE ON `luyang_db`.`Reviewer`
       FOR EACH ROW
       BEGIN
           UPDATE `luyang_db`.`Manuscript` `ma` SET `ma`.`status` = 'Submitted' 
           WHERE `ma`.`status` = 'Under review' AND `ma`.`idManuscript` IN (
           SELECT `idManuscript` FROM (
           SELECT `idManuscript`, COUNT(*) AS `number` FROM `Assignment` WHERE `idManuscript` IN (
           SELECT `idManuscript` FROM `Assignment` `am` 
           WHERE `am`.`idReviewer` = OLD.idReviewer
           ) GROUP BY `idManuscript`) `tp` WHERE `tp`.`number` <= 3);
       END;//
DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

INSERT INTO RICodes (interest) VALUES
('Agricultural engineering'),
('Biochemical engineering'),
('Biomechanical engineering'),
('Ergonomics'),
('Food engineering'),
('Bioprocess engineering'),
('Genetic engineering'),
('Human genetic engineering'),
('Metabolic engineering'),
('Molecular engineering'),
('Neural engineering'),
('Protein engineering'),
('Rehabilitation engineering'),
('Tissue engineering'),
('Aquatic and environmental engineering'),
('Architectural engineering'),
('Civionic engineering'),
('Construction engineering'),
('Earthquake engineering'),
('Earth systems engineering and management'),
('Ecological engineering'),
('Environmental engineering'),
('Geomatics engineering'),
('Geotechnical engineering'),
('Highway engineering'),
('Hydraulic engineering'),
('Landscape engineering'),
('Land development engineering'),
('Pavement engineering'),
('Railway systems engineering'),
('River engineering'),
('Sanitary engineering'),
('Sewage engineering'),
('Structural engineering'),
('Surveying'),
('Traffic engineering'),
('Transportation engineering'),
('Urban engineering'),
('Irrigation and agriculture engineering'),
('Explosives engineering'),
('Biomolecular engineering'),
('Ceramics engineering'),
('Broadcast engineering'),
('Building engineering'),
('Signal Processing'),
('Computer engineering'),
('Power systems engineering'),
('Control engineering'),
('Telecommunications engineering'),
('Electronic engineering'),
('Instrumentation engineering'),
('Network engineering'),
('Neuromorphic engineering'),
('Engineering Technology'),
('Integrated engineering'),
('Value engineering'),
('Cost engineering'),
('Fire protection engineering'),
('Domain engineering'),
('Engineering economics'),
('Engineering management'),
('Engineering psychology'),
('Ergonomics'),
('Facilities Engineering'),
('Logistic engineering'),
('Model-driven engineering'),
('Performance engineering'),
('Process engineering'),
('Product Family Engineering'),
('Quality engineering'),
('Reliability engineering'),
('Safety engineering'),
('Security engineering'),
('Support engineering'),
('Systems engineering'),
('Metallurgical Engineering'),
('Surface Engineering'),
('Biomaterials Engineering'),
('Crystal Engineering'),
('Amorphous Metals'),
('Metal Forming'),
('Ceramic Engineering'),
('Plastics Engineering'),
('Forensic Materials Engineering'),
('Composite Materials'),
('Casting'),
('Electronic Materials'),
('Nano materials'),
('Corrosion Engineering'),
('Vitreous Materials'),
('Welding'),
('Acoustical engineering'),
('Aerospace engineering'),
('Audio engineering'),
('Automotive engineering'),
('Building services engineering'),
('Earthquake engineering'),
('Forensic engineering'),
('Marine engineering'),
('Mechatronics'),
('Nanoengineering'),
('Naval architecture'),
('Sports engineering'),
('Structural engineering'),
('Vacuum engineering'),
('Military engineering'),
('Combat engineering'),
('Offshore engineering'),
('Optical engineering'),
('Geophysical engineering'),
('Mineral engineering'),
('Mining engineering'),
('Reservoir engineering'),
('Climate engineering'),
('Computer-aided engineering'),
('Cryptographic engineering'),
('Information engineering'),
('Knowledge engineering'),
('Language engineering'),
('Release engineering'),
('Teletraffic engineering'),
('Usability engineering'),
('Web engineering'),
('Systems engineering');